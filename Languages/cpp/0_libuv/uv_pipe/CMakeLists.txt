cmake_minimum_required(VERSION 3.0)
project(uv_demo)

if(ADC_LINK_DIRS)
  link_directories(${ADC_LINK_DIRS})
else()
  link_directories(${PROJECT_SOURCE_DIR}/../../../build)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/../../../build)
endif()

if(MSVC)
  list(APPEND add_cppflags /W4)
  if(CMAKE_BUILD_TYPE STREQUAL "Release")
     list(APPEND add_cppflags /O2)
  endif()
  # list(APPEND add_cppflags  /std:c++11)
else()
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
    list(APPEND add_cppflags -g)
  endif()
  list(APPEND add_cppflags -fvisibility=hidden)
  list(APPEND add_cppflags -std=c++11 -O2)
  list(APPEND add_cppflags -Wall -Wextra)
  list(APPEND add_cppflags -Wno-unused-but-set-variable)
  list(APPEND add_cppflags -Wno-unused-parameter)
endif()

if(MSVC)
  if(NOT DEFINED ENV{3RDPARTY})
      message(FATAL_ERROR "not defined system environment variable:3RDPARTY")
  else()
     list(APPEND add_includes $ENV{3RDPARTY}/libuv/include)
  endif()

  list(APPEND add_defines WIN32_LEAN_AND_MEAN _WIN32_WINNT=0x0600)
  list(APPEND add_libraries  $ENV{3RDPARTY}/libuv/uv.lib)
else()
  list(APPEND add_includes /usr/include)
  list(APPEND add_libraries pthread uv)
endif()

add_executable(pipe_svr pipe_svr.c)
target_compile_definitions(pipe_svr PRIVATE ${add_defines})
target_compile_options(pipe_svr PRIVATE ${add_cppflags})
target_include_directories(pipe_svr PRIVATE ${add_includes})
target_link_libraries(pipe_svr ${add_libraries})


add_executable(pipe_client pipe_client.c)
target_compile_definitions(pipe_client PRIVATE ${add_defines})
target_compile_options(pipe_client PRIVATE ${add_cppflags})
target_include_directories(pipe_client PRIVATE ${add_includes})
target_link_libraries(pipe_client ${add_libraries})

